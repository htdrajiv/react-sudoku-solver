{"ast":null,"code":"import _regeneratorRuntime from \"/Applications/Projects/NodeReactJs/SuDoKu/su-do-ku/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Applications/Projects/NodeReactJs/SuDoKu/su-do-ku/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/* Generated from Java with JSweet 2.2.0-SNAPSHOT - http://www.jsweet.org */\nvar SearchingAndBacktracking = {};\nvar SudokuUsingStack = {};\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nvar SudokuNode = function () {\n  function SudokuNode(x, y) {\n    if (this.x === undefined) this.x = 0;\n    if (this.y === undefined) this.y = 0;\n    if (this.value === undefined) this.value = 0;\n    this.x = x;\n    this.y = y;\n  }\n  /**\r\n   *\r\n   * @param {*} obj\r\n   * @return {boolean}\r\n   */\n\n\n  SudokuNode.prototype.equals = function (obj) {\n    var n2 = obj;\n    return this.value === n2.value;\n  };\n  /**\r\n   *\r\n   * @return {string}\r\n   */\n\n\n  SudokuNode.prototype.toString = function () {\n    return \"[(\" + this.x + \",\" + this.y + \")=\" + this.value + \"]\";\n  };\n\n  SudokuNode.prototype.getX = function () {\n    return this.x;\n  };\n\n  SudokuNode.prototype.setX = function (x) {\n    this.x = x;\n  };\n\n  SudokuNode.prototype.getY = function () {\n    return this.y;\n  };\n\n  SudokuNode.prototype.setY = function (y) {\n    this.y = y;\n  };\n\n  SudokuNode.prototype.getValue = function () {\n    return this.value;\n  };\n\n  SudokuNode.prototype.setValue = function (value) {\n    this.value = value;\n  };\n\n  return SudokuNode;\n}();\n\nSearchingAndBacktracking.SudokuNode = SudokuNode;\n\nSudokuUsingStack.main = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(args) {\n    var givenBoard, dimX, dimY, low, sudoku, i, stack, j, node, isPositionAvailable, num, isValidEntry, sn;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            givenBoard = args.inputBoard;\n            dimX = 9;\n            dimY = 9;\n            low = 1;\n\n            sudoku = function (dims) {\n              var allocate = function allocate(dims) {\n                if (dims.length == 0) {\n                  return 0;\n                } else {\n                  var array = [];\n\n                  for (var i = 0; i < dims[0]; i++) {\n                    array.push(allocate(dims.slice(1)));\n                  }\n\n                  return array;\n                }\n              };\n\n              return allocate(dims);\n            }([dimX, dimY]);\n\n            for (i = 0; i < dimX; i++) {\n              {\n                /* arraycopy */\n                (function (srcPts, srcOff, dstPts, dstOff, size) {\n                  if (srcPts !== dstPts || dstOff >= srcOff + size) {\n                    while (--size >= 0) {\n                      dstPts[dstOff++] = srcPts[srcOff++];\n                    }\n                  } else {\n                    var tmp = srcPts.slice(srcOff, srcOff + size);\n\n                    for (var i_1 = 0; i_1 < size; i_1++) {\n                      dstPts[dstOff++] = tmp[i_1];\n                    }\n                  }\n                })(givenBoard[i], 0, sudoku[i], 0, dimY);\n              }\n              ;\n            }\n\n            stack = [];\n            i = 0;\n\n          case 8:\n            if (!(i < dimX)) {\n              _context.next = 41;\n              break;\n            }\n\n            j = 0;\n\n          case 10:\n            if (!(j < dimY)) {\n              _context.next = 37;\n              break;\n            }\n\n            node = new SearchingAndBacktracking.SudokuNode(i, j);\n            isPositionAvailable = SudokuUsingStack.isPosAvailable(node, givenBoard); //console.info(\"Node = \" + node.toString() + \", isPositionAvailable = \" + isPositionAvailable);\n\n            if (!isPositionAvailable) {\n              _context.next = 33;\n              break;\n            }\n\n            num = low;\n\n          case 15:\n            if (!(num <= 9)) {\n              _context.next = 28;\n              break;\n            }\n\n            node.setValue(num);\n            isValidEntry = SudokuUsingStack.isValidEntry(node, sudoku); //console.info(\"Node = \" + node.toString() + \", isValidEntry = \" + isValidEntry);\n\n            if (!isValidEntry) {\n              _context.next = 24;\n              break;\n            }\n\n            /* push */\n            stack.push(node);\n            sudoku[i][j] = node.getValue(); //console.info(\"stack.toString() = \" + ('[' + stack.join(', ') + ']'));\n\n            args.updateBoard(sudoku); // await sleep(args.sleepTime)\n\n            low = 0;\n            return _context.abrupt(\"break\", 33);\n\n          case 24:\n            ;\n\n          case 25:\n            num++;\n            _context.next = 15;\n            break;\n\n          case 28:\n            //await sleep(300);\n            sn = stack.pop();\n            sudoku[i][j] = 0;\n            i = sn.getX();\n            j = sn.getY() - 1;\n            low = sn.getValue();\n\n          case 33:\n            ;\n\n          case 34:\n            j++;\n            _context.next = 10;\n            break;\n\n          case 37:\n            ;\n\n          case 38:\n            i++;\n            _context.next = 8;\n            break;\n\n          case 41:\n            console.info(\"final stack.toString() = \" + ('[' + stack.join(', ') + ']'));\n            SudokuUsingStack.printBoard(sudoku, dimX, dimY, args);\n\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/*private*/\n\n\nSudokuUsingStack.printBoard = function (sudokuBoard, dimX, dimY, args) {\n  allTheWayOut: for (var i = 0; i < dimX; i++) {\n    {\n      for (var j = 0; j < dimY; j++) {\n        {\n          if (sudokuBoard[i][j] === 0) {\n            console.info(\"Couldn\\'t find solution for this board!!\");\n            args.noSolution();\n            break allTheWayOut;\n          }\n\n          console.log(sudokuBoard[i][j] + \"  \");\n        }\n        ;\n      }\n\n      console.log(\"\");\n    }\n  }\n};\n/*private*/\n\n\nSudokuUsingStack.isPosAvailable = function (node, sudoku) {\n  return sudoku[node.getX()][node.getY()] === 0;\n};\n/*private*/\n\n\nSudokuUsingStack.isValidEntry = function (node, sudoku) {\n  for (var i = 0; i < 9; i++) {\n    {\n      if (sudoku[node.getX()][i] === node.getValue()) {\n        return false;\n      }\n    }\n    ;\n  }\n\n  for (var i = 0; i < 9; i++) {\n    {\n      if (sudoku[i][node.getY()] === node.getValue()) {\n        return false;\n      }\n    }\n    ;\n  }\n\n  var x = node.getX() - node.getX() % 3;\n  var y = node.getY() - node.getY() % 3;\n\n  for (var i = x; i < x + 3; i++) {\n    {\n      for (var j = y; j < y + 3; j++) {\n        {\n          if (sudoku[i][j] === node.getValue()) {\n            return false;\n          }\n        }\n        ;\n      }\n    }\n    ;\n  }\n\n  return true;\n};\n\nSearchingAndBacktracking.SudokuUsingStack = SudokuUsingStack;\nexport default SearchingAndBacktracking;","map":{"version":3,"sources":["/Applications/Projects/NodeReactJs/SuDoKu/su-do-ku/src/sudoku/Algorithm.js"],"names":["SearchingAndBacktracking","SudokuUsingStack","sleep","ms","Promise","resolve","setTimeout","SudokuNode","x","y","undefined","value","prototype","equals","obj","n2","toString","getX","setX","getY","setY","getValue","setValue","main","args","givenBoard","inputBoard","dimX","dimY","low","sudoku","dims","allocate","length","array","i","push","slice","srcPts","srcOff","dstPts","dstOff","size","tmp","i_1","stack","j","node","isPositionAvailable","isPosAvailable","num","isValidEntry","updateBoard","sn","pop","console","info","join","printBoard","sudokuBoard","allTheWayOut","noSolution","log"],"mappings":"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","sourcesContent":["/* Generated from Java with JSweet 2.2.0-SNAPSHOT - http://www.jsweet.org */\r\nvar SearchingAndBacktracking = {};\r\nvar SudokuUsingStack = {};\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nvar SudokuNode = (function () {\r\n    function SudokuNode(x, y) {\r\n        if (this.x === undefined)\r\n            this.x = 0;\r\n        if (this.y === undefined)\r\n            this.y = 0;\r\n        if (this.value === undefined)\r\n            this.value = 0;\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     *\r\n     * @param {*} obj\r\n     * @return {boolean}\r\n     */\r\n    SudokuNode.prototype.equals = function (obj) {\r\n        var n2 = obj;\r\n        return this.value === n2.value;\r\n    };\r\n    /**\r\n     *\r\n     * @return {string}\r\n     */\r\n    SudokuNode.prototype.toString = function () {\r\n        return \"[(\" + this.x + \",\" + this.y + \")=\" + this.value + \"]\";\r\n    };\r\n    SudokuNode.prototype.getX = function () {\r\n        return this.x;\r\n    };\r\n    SudokuNode.prototype.setX = function (x) {\r\n        this.x = x;\r\n    };\r\n    SudokuNode.prototype.getY = function () {\r\n        return this.y;\r\n    };\r\n    SudokuNode.prototype.setY = function (y) {\r\n        this.y = y;\r\n    };\r\n    SudokuNode.prototype.getValue = function () {\r\n        return this.value;\r\n    };\r\n    SudokuNode.prototype.setValue = function (value) {\r\n        this.value = value;\r\n    };\r\n    return SudokuNode;\r\n}());\r\n\r\nSearchingAndBacktracking.SudokuNode = SudokuNode;\r\n\r\nSudokuUsingStack.main = async function (args) {\r\n    var givenBoard = args.inputBoard;\r\n    var dimX = 9;\r\n    var dimY = 9;\r\n    var low = 1;\r\n    var sudoku = (function (dims) {\r\n        var allocate = function (dims) {\r\n            if (dims.length == 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                var array = [];\r\n                for (var i = 0; i < dims[0]; i++) {\r\n                    array.push(allocate(dims.slice(1)));\r\n                }\r\n                return array;\r\n            }\r\n        }; return allocate(dims);\r\n    })([dimX, dimY]);\r\n    for (var i = 0; i < dimX; i++) {\r\n        {\r\n            /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) {\r\n                if (srcPts !== dstPts || dstOff >= srcOff + size) {\r\n                    while (--size >= 0)\r\n                        dstPts[dstOff++] = srcPts[srcOff++];\r\n                }\r\n                else {\r\n                    var tmp = srcPts.slice(srcOff, srcOff + size);\r\n                    for (var i_1 = 0; i_1 < size; i_1++)\r\n                        dstPts[dstOff++] = tmp[i_1];\r\n                }\r\n            })(givenBoard[i], 0, sudoku[i], 0, dimY);\r\n        }\r\n        ;\r\n    }\r\n    var stack = ([]);\r\n\r\n    for (var i = 0; i < dimX; i++) {\r\n        {\r\n            for (var j = 0; j < dimY; j++) {\r\n                {\r\n                    var node = new SearchingAndBacktracking.SudokuNode(i, j);\r\n                    var isPositionAvailable = SudokuUsingStack.isPosAvailable(node, givenBoard);\r\n                    //console.info(\"Node = \" + node.toString() + \", isPositionAvailable = \" + isPositionAvailable);\r\n\r\n                    break1: if (isPositionAvailable) {\r\n\r\n                        for (var num = low; num <= 9; num++) {\r\n                            {\r\n                                node.setValue(num);\r\n                                var isValidEntry = SudokuUsingStack.isValidEntry(node, sudoku);\r\n                                //console.info(\"Node = \" + node.toString() + \", isValidEntry = \" + isValidEntry);\r\n                                if (isValidEntry) {\r\n                                    /* push */ stack.push(node);\r\n                                    sudoku[i][j] = node.getValue();\r\n                                    //console.info(\"stack.toString() = \" + ('[' + stack.join(', ') + ']'));\r\n                                    args.updateBoard(sudoku);\r\n                                    // await sleep(args.sleepTime)\r\n                                    low = 0;\r\n                                    break break1;\r\n                                }\r\n                            }\r\n                            ;\r\n                        }\r\n                        //await sleep(300);\r\n                        var sn = stack.pop();\r\n                        sudoku[i][j] = 0;\r\n                        i = sn.getX();\r\n                        j = sn.getY() - 1;\r\n                        low = sn.getValue();\r\n                    }\r\n                }\r\n                ;\r\n            }\r\n        }\r\n        ;\r\n    }\r\n    console.info(\"final stack.toString() = \" + ('[' + stack.join(', ') + ']'));\r\n    SudokuUsingStack.printBoard(sudoku, dimX, dimY, args);\r\n};\r\n/*private*/ SudokuUsingStack.printBoard = function (sudokuBoard, dimX, dimY, args) {\r\n    allTheWayOut: for (var i = 0; i < dimX; i++) {\r\n        {\r\n            for (var j = 0; j < dimY; j++) {\r\n                {\r\n                    if (sudokuBoard[i][j] === 0) {\r\n                        console.info(\"Couldn\\'t find solution for this board!!\");\r\n                        args.noSolution();\r\n                        break allTheWayOut;\r\n                    }\r\n                    console.log(sudokuBoard[i][j] + \"  \");\r\n                }\r\n                ;\r\n            }\r\n            console.log(\"\");\r\n        }\r\n    }\r\n};\r\n/*private*/ SudokuUsingStack.isPosAvailable = function (node, sudoku) {\r\n    return sudoku[node.getX()][node.getY()] === 0;\r\n};\r\n/*private*/ SudokuUsingStack.isValidEntry = function (node, sudoku) {\r\n    for (var i = 0; i < 9; i++) {\r\n        {\r\n            if (sudoku[node.getX()][i] === node.getValue()) {\r\n                return false;\r\n            }\r\n        }\r\n        ;\r\n    }\r\n    for (var i = 0; i < 9; i++) {\r\n        {\r\n            if (sudoku[i][node.getY()] === node.getValue()) {\r\n                return false;\r\n            }\r\n        }\r\n        ;\r\n    }\r\n    var x = node.getX() - node.getX() % 3;\r\n    var y = node.getY() - node.getY() % 3;\r\n    for (var i = x; i < x + 3; i++) {\r\n        {\r\n            for (var j = y; j < y + 3; j++) {\r\n                {\r\n                    if (sudoku[i][j] === node.getValue()) {\r\n                        return false;\r\n                    }\r\n                }\r\n                ;\r\n            }\r\n        }\r\n        ;\r\n    }\r\n    return true;\r\n};\r\n\r\nSearchingAndBacktracking.SudokuUsingStack = SudokuUsingStack;\r\n\r\n\r\n\r\nexport default SearchingAndBacktracking;\r\n"]},"metadata":{},"sourceType":"module"}